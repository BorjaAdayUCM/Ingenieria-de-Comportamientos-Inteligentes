FUNCTION_BLOCK FuzzyMsPacManRunAway	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	BLINKYdistance : REAL;
	PINKYdistance : REAL;
	INKYdistance : REAL;
	SUEdistance : REAL;
	
END_VAR

VAR_OUTPUT
	runAway : REAL;
END_VAR

FUZZIFY BLINKYdistance
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PINKYdistance
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY INKYdistance
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY SUEdistance
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

DEFUZZIFY runAway
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	RULE 1 : IF BLINKYdistance IS near THEN runAway IS emergency;
	RULE 2 : IF PINKYdistance IS near THEN runAway IS emergency;
	RULE 3 : IF INKYdistance IS near THEN runAway IS emergency;
	RULE 4 : IF SUEdistance IS near THEN runAway IS emergency;
	
	RULE 5 :  IF BLINKYdistance IS medium THEN runAway IS nervious; 
	RULE 6 : IF PINKYdistance IS medium THEN runAway IS nervious;  
    RULE 7 : IF INKYdistance IS medium THEN runAway IS nervious;
    RULE 8 : IF SUEdistance IS medium  THEN runAway IS nervious;
	
	RULE 9 : IF BLINKYdistance IS far THEN runAway IS calm;
	RULE 10 : IF PINKYdistance IS far THEN runAway IS calm;
    RULE 11 : IF INKYdistance IS far THEN runAway IS calm;
	RULE 12 : IF SUEdistance IS far THEN runAway IS calm;
	
END_RULEBLOCK

END_FUNCTION_BLOCK

FUNCTION_BLOCK FuzzyMsPacManEatGhost	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables
	BLINKYdistanceEdible : REAL;
	PINKYdistanceEdible : REAL;
	INKYdistanceEdible : REAL;
	SUEdistanceEdible : REAL;
	
END_VAR

VAR_OUTPUT
	eatGhost : REAL;
END_VAR

FUZZIFY BLINKYdistanceEdible
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY PINKYdistanceEdible
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY INKYdistanceEdible
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY SUEdistanceEdible
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

DEFUZZIFY eatGhost
	TERM calm := (0,1) (5,1) (15,0);
	TERM nervious := gauss 15 5;
	TERM emergency := (15,0) (25,1) (30,1);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK MsPacManRules
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	
	
	RULE 1 : IF BLINKYdistanceEdible IS near THEN eatGhost IS emergency;
	RULE 2 : IF PINKYdistanceEdible IS near THEN eatGhost IS emergency;
	RULE 3 : IF INKYdistanceEdible IS near THEN eatGhost IS emergency;
	RULE 4 : IF SUEdistanceEdible IS near THEN eatGhost IS emergency;
	
	RULE 5 :  IF BLINKYdistanceEdible IS medium THEN eatGhost IS nervious; 
	RULE 6 : IF PINKYdistanceEdible IS medium THEN eatGhost IS nervious;  
    RULE 7 : IF INKYdistanceEdible IS medium THEN eatGhost IS nervious;
    RULE 8 : IF SUEdistanceEdible IS medium  THEN eatGhost IS nervious;
	
	RULE 9 : IF BLINKYdistanceEdible IS far THEN eatGhost IS calm;
	RULE 10 : IF PINKYdistanceEdible IS far THEN eatGhost IS calm;
    RULE 11 : IF INKYdistanceEdible IS far THEN eatGhost IS calm;
	RULE 12 : IF SUEdistanceEdible IS far THEN eatGhost IS calm;
	
END_RULEBLOCK

END_FUNCTION_BLOCK